""" Tests for calculations."""
from aiida import orm
from aiida.plugins import CalculationFactory, DataFactory

from . import TEST_DIR


def test_kmapper():
    """Test kmapper."""
    import numpy as np
    from aiida_yambo_wannier90.calculations.kmapper import kmapper

    kpoints = np.array([
        [0.0000000, 0.0000000, 0.0000000, 0.0039062],
        [0.0000000, 0.0000000, 0.1250000, 0.0312500],
        [0.0000000, 0.0000000, 0.2500000, 0.0312500],
        [0.0000000, 0.0000000, 0.3750000, 0.0312500],
        [0.0000000, 0.0000000, -0.5000000, 0.0156250],
        [0.0000000, 0.1250000, 0.1250000, 0.0234375],
        [0.0000000, 0.1250000, 0.2500000, 0.0937500],
        [0.0000000, 0.1250000, 0.3750000, 0.0937500],
        [0.0000000, 0.1250000, -0.5000000, 0.0937500],
        [0.0000000, 0.1250000, -0.3750000, 0.0937500],
        [0.0000000, 0.1250000, -0.2500000, 0.0937500],
        [0.0000000, 0.1250000, -0.1250000, 0.0468750],
        [0.0000000, 0.2500000, 0.2500000, 0.0234375],
        [0.0000000, 0.2500000, 0.3750000, 0.0937500],
        [0.0000000, 0.2500000, -0.5000000, 0.0937500],
        [0.0000000, 0.2500000, -0.3750000, 0.0937500],
        [0.0000000, 0.2500000, -0.2500000, 0.0468750],
        [0.0000000, 0.3750000, 0.3750000, 0.0234375],
        [0.0000000, 0.3750000, -0.5000000, 0.0937500],
        [0.0000000, 0.3750000, -0.3750000, 0.0468750],
        [0.0000000, -0.5000000, -0.5000000, 0.0117188],
        [0.1250000, 0.2500000, 0.3750000, 0.0937500],
        [0.1250000, 0.2500000, -0.5000000, 0.1875000],
        [0.1250000, 0.2500000, -0.3750000, 0.0937500],
        [0.1250000, 0.3750000, -0.5000000, 0.0937500],
        [0.1250000, 0.3750000, -0.3750000, 0.1875000],
        [0.1250000, 0.3750000, -0.2500000, 0.0937500],
        [0.1250000, -0.5000000, -0.3750000, 0.0468750],
        [0.2500000, -0.5000000, -0.2500000, 0.0234375],
    ])

    dense_mesh = orm.KpointsData()
    dense_mesh.set_kpoints(
        kpoints=kpoints[:, :3],
        cartesian=False,
        weights=kpoints[:, 3],
    )

    kpoints = np.array([
        [0.00000000, 0.00000000, 0.00000000],
        [0.00000000, 0.00000000, 0.25000000],
        [0.00000000, 0.00000000, 0.50000000],
        [0.00000000, 0.00000000, 0.75000000],
        [0.00000000, 0.25000000, 0.00000000],
        [0.00000000, 0.25000000, 0.25000000],
        [0.00000000, 0.25000000, 0.50000000],
        [0.00000000, 0.25000000, 0.75000000],
        [0.00000000, 0.50000000, 0.00000000],
        [0.00000000, 0.50000000, 0.25000000],
        [0.00000000, 0.50000000, 0.50000000],
        [0.00000000, 0.50000000, 0.75000000],
        [0.00000000, 0.75000000, 0.00000000],
        [0.00000000, 0.75000000, 0.25000000],
        [0.00000000, 0.75000000, 0.50000000],
        [0.00000000, 0.75000000, 0.75000000],
        [0.25000000, 0.00000000, 0.00000000],
        [0.25000000, 0.00000000, 0.25000000],
        [0.25000000, 0.00000000, 0.50000000],
        [0.25000000, 0.00000000, 0.75000000],
        [0.25000000, 0.25000000, 0.00000000],
        [0.25000000, 0.25000000, 0.25000000],
        [0.25000000, 0.25000000, 0.50000000],
        [0.25000000, 0.25000000, 0.75000000],
        [0.25000000, 0.50000000, 0.00000000],
        [0.25000000, 0.50000000, 0.25000000],
        [0.25000000, 0.50000000, 0.50000000],
        [0.25000000, 0.50000000, 0.75000000],
        [0.25000000, 0.75000000, 0.00000000],
        [0.25000000, 0.75000000, 0.25000000],
        [0.25000000, 0.75000000, 0.50000000],
        [0.25000000, 0.75000000, 0.75000000],
        [0.50000000, 0.00000000, 0.00000000],
        [0.50000000, 0.00000000, 0.25000000],
        [0.50000000, 0.00000000, 0.50000000],
        [0.50000000, 0.00000000, 0.75000000],
        [0.50000000, 0.25000000, 0.00000000],
        [0.50000000, 0.25000000, 0.25000000],
        [0.50000000, 0.25000000, 0.50000000],
        [0.50000000, 0.25000000, 0.75000000],
        [0.50000000, 0.50000000, 0.00000000],
        [0.50000000, 0.50000000, 0.25000000],
        [0.50000000, 0.50000000, 0.50000000],
        [0.50000000, 0.50000000, 0.75000000],
        [0.50000000, 0.75000000, 0.00000000],
        [0.50000000, 0.75000000, 0.25000000],
        [0.50000000, 0.75000000, 0.50000000],
        [0.50000000, 0.75000000, 0.75000000],
        [0.75000000, 0.00000000, 0.00000000],
        [0.75000000, 0.00000000, 0.25000000],
        [0.75000000, 0.00000000, 0.50000000],
        [0.75000000, 0.00000000, 0.75000000],
        [0.75000000, 0.25000000, 0.00000000],
        [0.75000000, 0.25000000, 0.25000000],
        [0.75000000, 0.25000000, 0.50000000],
        [0.75000000, 0.25000000, 0.75000000],
        [0.75000000, 0.50000000, 0.00000000],
        [0.75000000, 0.50000000, 0.25000000],
        [0.75000000, 0.50000000, 0.50000000],
        [0.75000000, 0.50000000, 0.75000000],
        [0.75000000, 0.75000000, 0.00000000],
        [0.75000000, 0.75000000, 0.25000000],
        [0.75000000, 0.75000000, 0.50000000],
        [0.75000000, 0.75000000, 0.75000000],
    ])
    coarse_mesh = orm.KpointsData()
    coarse_mesh.set_kpoints(
        kpoints=kpoints,
        cartesian=False,
        weights=[1 / len(kpoints)] * len(kpoints),
    )

    result = kmapper(dense_mesh, coarse_mesh, orm.Int(1), orm.Int(14))

    assert isinstance(result, orm.List)

    result = result.get_list()

    solution = [
        [1, 1, 1, 14],
        [3, 3, 1, 14],
        [5, 5, 1, 14],
        [13, 13, 1, 14],
        [15, 15, 1, 14],
        [17, 17, 1, 14],
        [21, 21, 1, 14],
        [29, 29, 1, 14],
    ]
    assert result == solution
